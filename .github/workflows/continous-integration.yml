name: Continous Integration

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:

env:
  IS_TAG_BUILD: ${{ startsWith(github.event.ref, 'refs/tags') }}

# SECRETS
# - PYPI_TOKEN: publishing token for amn41 account, needs to be maintainer of
#               RasaHQ/rasa-sdk on pypi (account credentials in 1password)

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Set up Python 3.7 üêç
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Read Poetry Version üî¢
      run: |
           echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-3.7-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-

    - name: Load Yarn Cached Packages ‚¨á
      uses: actions/cache@v1
      with:
        path: docs/node_modules
        key: ${{ runner.os }}-yarn-12.x-${{ hashFiles('docs/yarn.lock') }}
        restore-keys: ${{ runner.os }}-yarn-12.x

    - name: Install Dependencies üì¶
      run: make install install-docs

    - name: Checkout target branch to be able to diff
      if: github.event_name == 'pull_request'
      run: |
        git fetch origin "${{ github.base_ref }}"
        echo "DOCSTRING_DIFF_BRANCH=origin/${{ github.base_ref }}" >> $GITHUB_ENV

        # Fetch entire history for current branch so that `make lint-docstrings`
        # can calculate the proper diff between the branches
        git fetch --unshallow origin "${{ github.ref }}"

    - name: Lint Code üéé
      run: |
        # If it's not a pull request, $DOCSTRING_DIFF_BRANCH is unset.
        # This will result in an empty diff, which effictively means that
        # make lint-docstrings will be skipped for other events than `pull_request`
        make lint BRANCH=$DOCSTRING_DIFF_BRANCH

    - name: Check Types üìö
      run: make types

    - name: Test Docs üï∏
      run: make test-docs

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }} üêç
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Read Poetry Version üî¢
      run: |
           echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-

    - name: Install Dependencies üì¶
      run: make install

    - name: Test Code üîç
      run: make test

    - name: Send Coverage Report üìä
      if: matrix.python-version == 3.6
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: poetry run coveralls

  build_docker_image_set_env:
    name: Prepare environment for Docker build
    runs-on: ubuntu-latest
    outputs:
      # Tag name used for intermediate images created during Docker image builds, e.g. 3886 - a PR number
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
    # Set environment variables for a pull request
    #
    # In this scenario, we've created a PR #1234
    #
    # Example output:
    # IMAGE_TAG=1234
    - name: Set environment variables - pull_request
      if: github.event_name == 'pull_request' && env.IS_TAG_BUILD == 'false'
      run: |
        echo "IMAGE_TAG=${{ github.event.number }}" >> $GITHUB_ENV

    # Set environment variables for a tag
    #
    # In this scenario, we've pushed the '2.4.1' tag
    #
    # Example output:
    # IMAGE_TAG=2.4.1
    - name: Set environment variables - push - tag
      if: github.event_name == 'push' && env.IS_TAG_BUILD == 'true'
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "IMAGE_TAG=${TAG_NAME}" >> $GITHUB_ENV

    # Set environment variables for a branch
    #
    # In this scenario, we've pushed changes into the main branch
    #
    # Example output:
    # IMAGE_TAG=main
    - name: Set environment variables - push - branch
      if: github.event_name == 'push' && env.IS_TAG_BUILD == 'false'
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "IMAGE_TAG=${BRANCH_NAME}" >> $GITHUB_ENV

    - name: Set output
      id: set_output
      run: |
        echo "::set-output name=image_tag::${{ env.IMAGE_TAG }}"

  build_docker_image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [quality, test, build_docker_image_set_env]

    steps:
      # Due to an issue with checking out a wrong commit, we make sure
      # to checkout HEAD commit for a pull request.
      # More details: https://github.com/actions/checkout/issues/299
    - name: Checkout pull request HEAD commit instead of merge commit üïù
      uses: actions/checkout@v2
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Checkout git repository üïù
      uses: actions/checkout@v2
      if: github.event_name != 'pull_request'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@154c24e1f33dbb5865a021c99f1318cfebf27b32
      with:
        version: latest

    - name: Set environment variables
      run: |
        echo "IMAGE_TAG=${{ needs.build_docker_image_set_env.outputs.image_tag }}" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker buildx bake --load

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest

    # deploy will only be run when there is a tag available
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [quality, test]     # only run after all other stages succeeded

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Set up Python 3.6 üêç
      uses: actions/setup-python@v1
      with:
        python-version: 3.6

    - name: Read Poetry Version üî¢
      run: |
           echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Build ‚öíÔ∏è Distributions
      run: poetry build

    - name: Publish to PyPI üì¶
      uses: pypa/gh-action-pypi-publish@37e305e7413032d8422456179fee28fac7d25187
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}

    - name: Publish Release Notes üóû
      if: env.IS_TAG_BUILD
      env:
        GITHUB_TAG: ${{ github.ref }}
        GITHUB_REPO_SLUG: ${{ github.repository }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        GITHUB_TAG=${GITHUB_TAG/refs\/tags\//}
        sudo apt-get update
        sudo apt-get -y install pandoc
        pip install -U github3.py pep440_version_utils
        python3 ${GITHUB_WORKSPACE}/scripts/publish_gh_release_notes.py

    - name: Get RASA SDK Version
      env:
        RASA_SDK_VERSION: ${{ github.ref }}
      run: |
        echo "RASA_SDK_VERSION=${RASA_SDK_VERSION/refs\/tags\//}" >> $GITHUB_ENV

    - name: Notify Slack üí¨
      if: env.IS_TAG_BUILD && success()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      uses: Ilshidur/action-slack@2.1.0
      with:
        args: "‚ö° New *Rasa SDK* version ${{ env.RASA_SDK_VERSION }} has been released! Changelog: https://github.com/RasaHQ/rasa-sdk/blob/${{ env.RASA_SDK_VERSION }}/CHANGELOG.mdx"

    - name: Notify Slack of Failure ‚õî
      if: env.IS_TAG_BUILD && failure()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      uses: Ilshidur/action-slack@2.1.0
      with:
        args: "‚õîÔ∏è *Rasa SDK* version ${{ env.RASA_SDK_VERSION }} could not be released üò± GitHub Actions: https://github.com/RasaHQ/rasa-sdk/actions?query=branch%3A${{ env.RASA_SDK_VERSION }}"
